name: Update Data

on:
  schedule:
    - cron: '0 * * * *' # Runs every hour
  push:
    branches:
      - main

jobs:
  update-data:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Fetch ELO Data and Update JSON
        run: |
          set -e
          echo "[]" > elo_data.json
          profiles=("/steam/76561198067966567" "/steam/76561198123456789" "/steam/76561198234567890")
          for profile in "${profiles[@]}"; do
            encoded_profile=$(echo "$profile" | jq -sRr @uri)
            echo "Fetching data for profile: $encoded_profile"
            response=$(curl -s "https://aoe-api.reliclink.com/community/leaderboard/GetPersonalStat?title=age2&profile_names=[\"$encoded_profile\"]")
            echo "Response: $response"
            if [ -z "$response" ]; then
              echo "Error: No response for profile $profile" >&2
              exit 1
            fi
            # Check if the response is valid JSON
            if ! echo "$response" | jq . > /dev/null 2>&1; then
              echo "Error: Invalid JSON response for profile $profile" >&2
              exit 1
            fi
            # Check if the result code is 0 (SUCCESS)
            result_code=$(echo "$response" | jq '.result.code')
            if [ "$result_code" -ne 0 ]; then
              echo "Error: API response indicates failure for profile $profile" >&2
              exit 1
            fi
            # Extract ELO ratings
            elo1v1=$(echo "$response" | jq '.leaderboardStats[] | select(.leaderboard_id == 3) | .rating')
            eloTeam=$(echo "$response" | jq '.leaderboardStats[] | select(.leaderboard_id == 4) | .rating')
            if [ -z "$elo1v1" ]; then
              elo1v1=null
            fi
            if [ -z "$eloTeam" ]; then
              eloTeam=null
            fi
            echo "elo1v1: $elo1v1, eloTeam: $eloTeam"
            jq --arg profile "$profile" \
               --argjson elo1v1 "$elo1v1" \
               --argjson eloTeam "$eloTeam" \
               '. += [{
                  "profile": $profile,
                  "elo1v1": {
                    "rating": $elo1v1
                  },
                  "eloTeam": {
                    "rating": $eloTeam
                  }
                }]' elo_data.json > tmp.json && mv tmp.json elo_data.json
          done

      - name: Fetch Live Status and Update JSON
        env:
          TWITCH_CLIENT_ID: ${{ secrets.TWITCH_CLIENT_ID }}
          TWITCH_ACCESS_TOKEN: ${{ secrets.TWITCH_ACCESS_TOKEN }}
        run: |
          echo "[]" > live_status.json
          for streamer in inertiacreeping shiderplays ttambow chestnutplace77; do
            response=$(curl -s -H "Client-ID: $TWITCH_CLIENT_ID" -H "Authorization: Bearer $TWITCH_ACCESS_TOKEN" "https://api.twitch.tv/helix/streams?user_login=$streamer")
            is_live=$(echo $response | jq '.data | length > 0')
            jq --argjson is_live $is_live --arg name $streamer '. += [{"name": $name, "is_live": $is_live}]' live_status.json > tmp.json && mv tmp.json live_status.json
          done

      - name: Commit and Push JSON
        env:
          CLASSIC_PAT: ${{ secrets.CLASSIC_PAT }}
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${{ secrets.CLASSIC_PAT }}@github.com/${{ github.repository }}
          git add elo_data.json live_status.json
          git commit -m "Update ELO and live status data"
          git push origin HEAD:main
