name: Update Player and ELO Data

on:
  schedule:
    - cron: '*/5 * * * *' # Runs every 5 minutes
  push:
    branches:
      - main

jobs:
  update-data:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: sudo apt-get install -y jq

      - name: Update Twitch Status in `PLAYERS.JSON`
        env: 
          TWITCH_CLIENT_ID: ${{ secrets.TWITCH_CLIENT_ID }}
          TWITCH_ACCESS_TOKEN: ${{ secrets.TWITCH_ACCESS_TOKEN }}
        run: |
          set -e
          TWITCH_CLIENT_ID=${{ secrets.TWITCH_CLIENT_ID }}
          TWITCH_ACCESS_TOKEN=${{ secrets.TWITCH_ACCESS_TOKEN }}
          TWITCH_API_URL=https://api.twitch.tv/helix/streams
          TWITCH_USER_NAMES=()

          get_twitch_user_status() {
            local userName=$1
            response=$(curl -s -G "$TWITCH_API_URL" \
              --data-urlencode "user_login=$userName" \
              -H "Client-ID: $TWITCH_CLIENT_ID" \
              -H "Authorization: Bearer $TWITCH_ACCESS_TOKEN")
          
            if [ "$(echo "$response" | jq '.data | length')" -eq 0 ]; then
              echo 'offline'
            else
              echo "$response" | jq -r '.data[0].type | tostring'
            fi
          }
          
          while IFS= read -r line; do
            twitchUserName=$(echo "$line" | jq -r '.twitch | capture("https://www.twitch.tv/(?<username>.+)") | .username')
            [ -n "$twitchUserName" ] && TWITCH_USER_NAMES+=("$twitchUserName")
          done < <(jq -c '.[]' data/players.json)
          
          for userName in "${TWITCH_USER_NAMES[@]}"; do
            userStatus=$(get_twitch_user_status "$userName")
            jq --arg name "$userName" --arg status "$userStatus" \
              'map(if .twitch | capture("https://www.twitch.tv/(?<username>.+)") | .username == $name then .status = $status else . end)' \
            data/players.json > tmp.json && mv tmp.json data/players.json
          done
          more data/players.json

      - name: Update ELO Data in `PLAYERS.JSON`
        run: |
          set -e
          STEAM_IDS=()
          while IFS= read -r line; do
            steamId=$(echo "$line" | jq -r '.steamId')
            [ -n "$steamId" ] && STEAM_IDS+=("$steamId")
          done < <(jq -c '.[]' data/players.json)

          [ ! -d data ] && mkdir -p data
          echo "[]" > data/elo_data.json

          for steamId in "${STEAM_IDS[@]}"; do
            response=$(curl -s "https://aoe-api.reliclink.com/community/leaderboard/GetPersonalStat?title=age2&profile_names=\[%22$steamId%22\]")
            elo1v1=$(echo "$response" | jq '.leaderboardStats[] | select(.leaderboard_id == 3) | .rating')
            eloTeam=$(echo "$response" | jq '.leaderboardStats[] | select(.leaderboard_id == 4) | .rating')
            [ -z "$elo1v1" ] && elo1v1=null
            [ -z "$eloTeam" ] && eloTeam=null
            jq --arg steamId "$steamId" --argjson elo1v1 "$elo1v1" --argjson eloTeam "$eloTeam" \
            '. += [{
              "steamId": $steamId,
              "elo1v1": $elo1v1,
              "eloTeam": $eloTeam
                }]' data/elo_data.json > tmp.json && mv tmp.json data/elo_data.json
          done

      - name: Commit and Push JSON
        env:
          CLASSIC_PAT: ${{ secrets.CLASSIC_PAT }}
        run: |
          if [[ "$(git status --porcelain | wc -l)" -gt 0 ]] ; then
            git config --global user.name 'github-actions[bot]'
            git config --global user.email 'github-actions[bot]@users.noreply.github.com'
            git remote set-url origin https://x-access-token:${{ secrets.CLASSIC_PAT }}@github.com/${{ github.repository }}
            git add .
            git commit -m "Update data json files"
            git push origin HEAD:main
          fi
