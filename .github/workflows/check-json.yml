name: Fetch AOE2 Personal Stats

on:
  workflow_dispatch:

jobs:
  fetch-stats:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Fetch AOE2 Personal Stats
      run: |
        set -e
        echo "[]" > elo_data.json
        profiles=(/steam/76561198151727332 /steam/76561198040642066 /steam/76561198403361404 /steam/76561198067966567)

        for profile in "${profiles[@]}"; do
          echo "Fetching data for profile: $profile"
          url="https://aoe-api.reliclink.com/community/leaderboard/GetPersonalStat?title=age2&profile_names=%5B%22$profile%22%5D"
          http_response=$(curl -s -w "HTTPSTATUS:%{http_code}" -A "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36" "$url")
          http_body=$(echo "$http_response" | sed -e 's/HTTPSTATUS:.*//g')
          http_status=$(echo "$http_response" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          echo "HTTP Status Code: $http_status"
          echo "Response Body: $http_body"

          if [ "$http_status" -ne 200 ]; then
            echo "Error: HTTP request failed with status $http_status"
            continue
          fi

          if echo "$http_body" | jq . > /dev/null 2>&1; then
            echo "Valid JSON Response"
          else
            echo "Invalid JSON Response"
            continue
          fi

          leaderboardStats=$(echo "$http_body" | jq -r '.leaderboardStats')
          if [ -z "$leaderboardStats" ] || [ "$leaderboardStats" == "null" ]; then
            echo "No leaderboardStats found for profile $profile"
            continue
          fi

          elo1v1=$(echo "$leaderboardStats" | jq 'map(select(.leaderboard_id == 3) | .rating) | first // null')
          eloTeam=$(echo "$leaderboardStats" | jq 'map(select(.leaderboard_id == 4) | .rating) | first // null')

          echo "elo1v1: $elo1v1, eloTeam: $eloTeam"

          tmp_json=$(jq --arg profile "$profile" \
                        --argjson elo1v1 "$elo1v1" \
                        --argjson eloTeam "$eloTeam" \
                        '. += [{
                           "profile": $profile,
                           "elo1v1": {
                             "rating": $elo1v1
                           },
                           "eloTeam": {
                             "rating": $eloTeam
                           }
                         }]' elo_data.json)

          if [ $? -ne 0 ]; then
            echo "Error updating JSON for profile $profile"
            continue
          fi

          echo "$tmp_json" > elo_data.json
        done

    - name: Upload JSON output
      uses: actions/upload-artifact@v3
      with:
        name: elo_data
        path: elo_data.json
